# RUN: llc -mtriple x86_64-unknown-linux-gnu -simplify-mir --load=%llvmshlibdir/X86KruglovCntPass%shlibext -run-pass=x86-kruglov-cnt-pass %s -o - | FileCheck %s

--- |
    ; ModuleID = 'hello.ll'
    source_filename = "hello.c"
    target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
    target triple = "x86_64-unknown-linux-gnu"
    
    @ic = dso_local global i64 0, align 8
    
    ; Function Attrs: noinline nounwind optnone uwtable
    define dso_local void @empty() #0 {
        ret void
    }
    
    ; Function Attrs: noinline nounwind optnone uwtable
    define dso_local i32 @mixed(i32 noundef %0) #0 {
        %2 = alloca i32, align 4
        %3 = alloca i32, align 4
        %4 = alloca i32, align 4
        store i32 %0, ptr %2, align 4
        store i64 0, ptr @ic, align 8
        %5 = load i32, ptr %2, align 4
        %6 = srem i32 %5, 2
        %7 = icmp eq i32 %6, 1
        br i1 %7, label %8, label %22
    
    8:                                                ; preds = %1
        store i32 0, ptr %4, align 4
        br label %9
    
    9:                                                ; preds = %18, %8
        %10 = load i32, ptr %4, align 4
        %11 = load i32, ptr %2, align 4
        %12 = icmp slt i32 %10, %11
        br i1 %12, label %13, label %21
    
    13:                                               ; preds = %9
        %14 = load i32, ptr %4, align 4
        %15 = srem i32 %14, 2
        %16 = load i32, ptr %3, align 4
        %17 = add nsw i32 %16, %15
        store i32 %17, ptr %3, align 4
        br label %18
    
    18:                                               ; preds = %13
        %19 = load i32, ptr %2, align 4
        %20 = add nsw i32 %19, 1
        store i32 %20, ptr %2, align 4
        br label %9, !llvm.loop !6
    
    21:                                               ; preds = %9
        br label %23
    
    22:                                               ; preds = %1
        store i32 0, ptr %3, align 4
        br label %23
    
    23:                                               ; preds = %22, %21
        %24 = load i32, ptr %3, align 4
        ret i32 %24
    }
    
    ; Function Attrs: noinline nounwind optnone uwtable
    define dso_local i32 @ariphmetics(i32 noundef %0, i32 noundef %1) #0 {
        %3 = alloca i32, align 4
        %4 = alloca i32, align 4
        store i32 %0, ptr %3, align 4
        store i32 %1, ptr %4, align 4
        store i64 0, ptr @ic, align 8
        %5 = load i32, ptr %3, align 4
        %6 = load i32, ptr %4, align 4
        %7 = add nsw i32 %5, %6
        store i32 %7, ptr %3, align 4
        %8 = load i32, ptr %3, align 4
        %9 = load i32, ptr %4, align 4
        %10 = mul nsw i32 %8, %9
        %11 = add nsw i32 %10, 2
        ret i32 %11
    }
    
    ; Function Attrs: noinline nounwind optnone uwtable
    define dso_local i32 @branch(i32 noundef %0, i32 noundef %1) #0 {
        %3 = alloca i32, align 4
        %4 = alloca i32, align 4
        %5 = alloca i32, align 4
        store i32 %0, ptr %4, align 4
        store i32 %1, ptr %5, align 4
        %6 = load i32, ptr %4, align 4
        %7 = load i32, ptr %5, align 4
        %8 = icmp slt i32 %6, %7
        br i1 %8, label %9, label %11
    
    9:                                                ; preds = %2
        %10 = load i32, ptr %4, align 4
        store i32 %10, ptr %3, align 4
        br label %13
    
    11:                                               ; preds = %2
        %12 = load i32, ptr %5, align 4
        store i32 %12, ptr %3, align 4
        br label %13
    
    13:                                               ; preds = %11, %9
        %14 = load i32, ptr %3, align 4
        ret i32 %14
    }
    
    ; Function Attrs: noinline nounwind optnone uwtable
    define dso_local i32 @cycles(i32 noundef %0) #0 {
        %2 = alloca i32, align 4
        %3 = alloca i32, align 4
        %4 = alloca i32, align 4
        store i32 %0, ptr %2, align 4
        store i32 1, ptr %3, align 4
        store i32 0, ptr %4, align 4
        br label %5
    
    5:                                                ; preds = %13, %1
        %6 = load i32, ptr %4, align 4
        %7 = load i32, ptr %2, align 4
        %8 = icmp slt i32 %6, %7
        br i1 %8, label %9, label %16
    
    9:                                                ; preds = %5
        %10 = load i32, ptr %4, align 4
        %11 = load i32, ptr %3, align 4
        %12 = mul nsw i32 %11, %10
        store i32 %12, ptr %3, align 4
        br label %13
    
    13:                                               ; preds = %9
        %14 = load i32, ptr %4, align 4
        %15 = add nsw i32 %14, 1
        store i32 %15, ptr %4, align 4
        br label %5, !llvm.loop !8
    
    16:                                               ; preds = %5
        %17 = load i32, ptr %3, align 4
        ret i32 %17
    }
    
    attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
    
    !llvm.module.flags = !{!0, !1, !2, !3, !4}
    !llvm.ident = !{!5}
    
    !0 = !{i32 1, !"wchar_size", i32 4}
    !1 = !{i32 8, !"PIC Level", i32 2}
    !2 = !{i32 7, !"PIE Level", i32 2}
    !3 = !{i32 7, !"uwtable", i32 2}
    !4 = !{i32 7, !"frame-pointer", i32 2}
    !5 = !{!"clang version 17.0.6 (https://github.com/KrYackI/llvm-nnsu-2024.git 838b63b24e62a87b45f0bb4b4b28acddd6a372dc)"}
    !6 = distinct !{!6, !7}
    !7 = !{!"llvm.loop.mustprogress"}
    !8 = distinct !{!8, !7}

...
---
name:            empty
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
frameInfo:
    maxAlignment:    1
machineFunctionInfo: {}
body:             |
    bb.0 (%ir-block.0):
        RET 0

...
---
name:            mixed
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
registers:
- { id: 0, class: gr32 }
- { id: 1, class: gpr }
- { id: 2, class: gpr }
- { id: 3, class: gpr }
- { id: 4, class: gr64 }
- { id: 5, class: gr64 }
- { id: 6, class: gr32 }
- { id: 7, class: gr32 }
- { id: 8, class: gr32 }
- { id: 9, class: gr32 }
- { id: 10, class: gr8 }
- { id: 11, class: gr32 }
- { id: 12, class: gr32 }
- { id: 13, class: gr32 }
- { id: 14, class: gr8 }
- { id: 15, class: gr32 }
- { id: 16, class: gr32 }
- { id: 17, class: gr32 }
- { id: 18, class: gr32 }
- { id: 19, class: gr32 }
- { id: 20, class: gr32 }
- { id: 21, class: gr32 }
- { id: 22, class: gr8 }
- { id: 23, class: gr8 }
liveins:
- { reg: '$edi' }
frameInfo:
    maxAlignment:    4
stack:
- { id: 0, size: 4, alignment: 4 }
- { id: 1, size: 4, alignment: 4 }
- { id: 2, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
    bb.0 (%ir-block.1):
        liveins: $edi

        %0:gr32 = COPY $edi
        %4:gr64 = MOV32ri64 0
        %5:gr64 = LEA64r $noreg, 1, $noreg, @ic, $noreg
        %7:gr32 = MOV32ri 2
        %9:gr32 = MOV32ri 1
        %11:gr32 = MOV32r0 implicit-def $eflags
        MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s32) into %ir.2)
        MOV64mr %5, 1, $noreg, 0, $noreg, %4 :: (store (s64) into @ic)
        %6:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.2)
        $eax = COPY %6
        CDQ implicit-def $eax, implicit-def $edx, implicit $eax
        IDIV32r %7, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
        %8:gr32 = COPY $edx
        CMP32rr %8, %9, implicit-def $eflags
        %23:gr8 = SETCCr 4, implicit $eflags
        TEST8ri %23, 1, implicit-def $eflags
        JCC_1 %bb.1, 5, implicit $eflags
        JMP_1 %bb.6
        ; CHECK: %23:gr8 = SETCCr 4, implicit $eflags
        ; CHECK-NEXT: TEST8ri %23, 1, implicit-def $eflags
        ; CHECK-NEXT: ADD64ri32 18, &ic, implicit-def $eflags
        ; CHECK-NEXT: JCC_1 %bb.1, 5, implicit $eflags

    bb.1 (%ir-block.8):
        MOV32mr %stack.2, 1, $noreg, 0, $noreg, %11 :: (store (s32) into %ir.4)
        ; CHECK: MOV32mr %stack.2, 1, $noreg, 0, $noreg, %11 :: (store (s32) into %ir.4)
        ; CHECK-NEXT: ADD64ri32 1, &ic, implicit-def $eflags

    bb.2 (%ir-block.9):
        %12:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.4)
        %13:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.2)
        CMP32rr %12, %13, implicit-def $eflags
        %22:gr8 = SETCCr 12, implicit $eflags
        TEST8ri %22, 1, implicit-def $eflags
        ; CHECK: TEST8ri %22, 1, implicit-def $eflags
        ; CHECK-NEXT: ADD64ri32 7, &ic, implicit-def $eflags
        ; CHECK-NEXT: JCC_1 %bb.3, 5, implicit $eflags
        JCC_1 %bb.3, 5, implicit $eflags
        JMP_1 %bb.5

    bb.3 (%ir-block.13):
        %16:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.4)
        $eax = COPY %16
        CDQ implicit-def $eax, implicit-def $edx, implicit $eax
        IDIV32r %7, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
        %17:gr32 = COPY $edx
        %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
        %19:gr32 = nsw ADD32rr %18, %17, implicit-def $eflags
        MOV32mr %stack.1, 1, $noreg, 0, $noreg, %19 :: (store (s32) into %ir.3)
        ; CHECK: MOV32mr %stack.1, 1, $noreg, 0, $noreg, %19 :: (store (s32) into %ir.3)
        ; CHECK-NEXT: ADD64ri32 8, &ic, implicit-def $eflags

    bb.4 (%ir-block.18):
        %20:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.2)
        %21:gr32 = nsw INC32r %20, implicit-def $eflags
        MOV32mr %stack.0, 1, $noreg, 0, $noreg, %21 :: (store (s32) into %ir.2)
        ; CHECK: MOV32mr %stack.0, 1, $noreg, 0, $noreg, %21 :: (store (s32) into %ir.2)
        ; CHECK-NEXT: ADD64ri32 4, &ic, implicit-def $eflags
        ; CHECK-NEXT: JMP_1 %bb.2
        JMP_1 %bb.2

    bb.5 (%ir-block.21):
        ; CHECK: ADD64ri32 1, &ic, implicit-def $eflags
        ; CHECK-NEXT: JMP_1 %bb.7
        JMP_1 %bb.7

    bb.6 (%ir-block.22):
        MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11 :: (store (s32) into %ir.3)
        ; CHECK: MOV32mr %stack.1, 1, $noreg, 0, $noreg, %11 :: (store (s32) into %ir.3)
        ; CHECK-NEXT: ADD64ri32 1, &ic, implicit-def $eflags

    bb.7 (%ir-block.23):
        %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
        $eax = COPY %15
        RET 0, implicit $eax
        ; CHECK: $eax = COPY %15
        ; CHECK-NEXT: ADD64ri32 3, &ic, implicit-def $eflags
        ; CHECK-NEXT RET 0, implicit $eax

...
---
name:            ariphmetics
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
registers:
- { id: 0, class: gr32 }
- { id: 1, class: gr32 }
- { id: 2, class: gpr }
- { id: 3, class: gpr }
- { id: 4, class: gr64 }
- { id: 5, class: gr64 }
- { id: 6, class: gr32 }
- { id: 7, class: gr32 }
- { id: 8, class: gr32 }
- { id: 9, class: gr32 }
- { id: 10, class: gr32 }
- { id: 11, class: gr32 }
- { id: 12, class: gpr }
- { id: 13, class: gr32 }
liveins:
- { reg: '$edi' }
- { reg: '$esi' }
frameInfo:
    maxAlignment:    4
stack:
- { id: 0, size: 4, alignment: 4 }
- { id: 1, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
    bb.0 (%ir-block.2):
        liveins: $edi, $esi

        %0:gr32 = COPY $edi
        %1:gr32 = COPY $esi
        %4:gr64 = MOV32ri64 0
        %5:gr64 = LEA64r $noreg, 1, $noreg, @ic, $noreg
        MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s32) into %ir.3)
        MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.4)
        MOV64mr %5, 1, $noreg, 0, $noreg, %4 :: (store (s64) into @ic)
        %6:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
        %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.4)
        %8:gr32 = nsw ADD32rr %6, %7, implicit-def $eflags
        MOV32mr %stack.0, 1, $noreg, 0, $noreg, %8 :: (store (s32) into %ir.3)
        %9:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
        %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.4)
        %11:gr32 = nsw IMUL32rr %9, %10, implicit-def $eflags
        %13:gr32 = nsw ADD32ri %11, 2, implicit-def $eflags
        $eax = COPY %13
        RET 0, implicit $eax
        ; CHECK: %13:gr32 = nsw ADD32ri %11, 2, implicit-def $eflags
        ; CHECK-NEXT: $eax = COPY %13
        ; CHECK-NEXT: ADD64ri32 17, &ic, implicit-def $eflags
        ; CHECK-NEXT: RET 0, implicit $eax

...
---
name:            branch
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
registers:
- { id: 0, class: gr32 }
- { id: 1, class: gr32 }
- { id: 2, class: gpr }
- { id: 3, class: gpr }
- { id: 4, class: gpr }
- { id: 5, class: gr32 }
- { id: 6, class: gr32 }
- { id: 7, class: gr8 }
- { id: 8, class: gr32 }
- { id: 9, class: gr32 }
- { id: 10, class: gr32 }
- { id: 11, class: gr8 }
liveins:
- { reg: '$edi' }
- { reg: '$esi' }
frameInfo:
    maxAlignment:    4
stack:
- { id: 0, size: 4, alignment: 4 }
- { id: 1, size: 4, alignment: 4 }
- { id: 2, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
    bb.0 (%ir-block.2):
        liveins: $edi, $esi

        %0:gr32 = COPY $edi
        %1:gr32 = COPY $esi
        MOV32mr %stack.1, 1, $noreg, 0, $noreg, %0 :: (store (s32) into %ir.4)
        MOV32mr %stack.2, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.5)
        %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.4)
        %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.5)
        CMP32rr %5, %6, implicit-def $eflags
        %11:gr8 = SETCCr 12, implicit $eflags
        TEST8ri %11, 1, implicit-def $eflags
        JCC_1 %bb.1, 5, implicit $eflags
        JMP_1 %bb.2
        ; CHECK: %11:gr8 = SETCCr 12, implicit $eflags
        ; CHECK-NEXT: TEST8ri %11, 1, implicit-def $eflags
        ; CHECK-NEXT: ADD64ri32 11, &ic, implicit-def $eflags
        ; CHECK-NEXT: JCC_1 %bb.1, 5, implicit $eflags

    bb.1 (%ir-block.9):
        %9:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.4)
        MOV32mr %stack.0, 1, $noreg, 0, $noreg, %9 :: (store (s32) into %ir.3)
        JMP_1 %bb.3
        ; CHECK: %9:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.4)
        ; CHECK-NEXT: MOV32mr %stack.0, 1, $noreg, 0, $noreg, %9 :: (store (s32) into %ir.3)
        ; CHECK-NEXT: ADD64ri32 3, &ic, implicit-def $eflags
        ; CHECK-NEXT: JMP_1 %bb.3

    bb.2 (%ir-block.11):
        %8:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.5)
        MOV32mr %stack.0, 1, $noreg, 0, $noreg, %8 :: (store (s32) into %ir.3)
        ; CHECK: %8:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.5)
        ; CHECK-NEXT: MOV32mr %stack.0, 1, $noreg, 0, $noreg, %8 :: (store (s32) into %ir.3)
        ; CHECK-NEXT: ADD64ri32 2, &ic, implicit-def $eflags

    bb.3 (%ir-block.13):
        %10:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
        $eax = COPY %10
        RET 0, implicit $eax
        ; CHECK: %10:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
        ; CHECK-NEXT: $eax = COPY %10
        ; CHECK-NEXT: ADD64ri32 3, &ic, implicit-def $eflags
        ; CHECK-NEXT: RET 0, implicit $eax

...
---
name:            cycles
alignment:       16
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
registers:
- { id: 0, class: gr32 }
- { id: 1, class: gpr }
- { id: 2, class: gpr }
- { id: 3, class: gpr }
- { id: 4, class: gr32 }
- { id: 5, class: gr32 }
- { id: 6, class: gr32 }
- { id: 7, class: gr32 }
- { id: 8, class: gr8 }
- { id: 9, class: gr32 }
- { id: 10, class: gr32 }
- { id: 11, class: gr32 }
- { id: 12, class: gr32 }
- { id: 13, class: gr32 }
- { id: 14, class: gr32 }
- { id: 15, class: gr8 }
liveins:
- { reg: '$edi' }
frameInfo:
    maxAlignment:    4
stack:
- { id: 0, size: 4, alignment: 4 }
- { id: 1, size: 4, alignment: 4 }
- { id: 2, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
    bb.0 (%ir-block.1):
        liveins: $edi

        %0:gr32 = COPY $edi
        %4:gr32 = MOV32ri 1
        %5:gr32 = MOV32r0 implicit-def $eflags
        MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s32) into %ir.2)
        MOV32mr %stack.1, 1, $noreg, 0, $noreg, %4 :: (store (s32) into %ir.3)
        MOV32mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.4)
        ; CHECK: MOV32mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s32) into %ir.2)
        ; CHECK-NEXT: MOV32mr %stack.1, 1, $noreg, 0, $noreg, %4 :: (store (s32) into %ir.3)
        ; CHECK-NEXT: MOV32mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.4)
        ; CHECK-NEXT: ADD64ri32 6, &ic, implicit-def $eflags

    bb.1 (%ir-block.5):
        %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.4)
        %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.2)
        CMP32rr %6, %7, implicit-def $eflags
        %15:gr8 = SETCCr 12, implicit $eflags
        TEST8ri %15, 1, implicit-def $eflags
        JCC_1 %bb.2, 5, implicit $eflags
        JMP_1 %bb.4
        ; CHECK: TEST8ri %15, 1, implicit-def $eflags
        ; CHECK-NEXT: ADD64ri32 7, &ic, implicit-def $eflags
        ; CHECK-NEXT: JCC_1 %bb.2, 5, implicit $eflags
        ; CHECK-NEXT: JMP_1 %bb.4

    bb.2 (%ir-block.9):
        %10:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.4)
        %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
        %12:gr32 = nsw IMUL32rr %11, %10, implicit-def $eflags
        MOV32mr %stack.1, 1, $noreg, 0, $noreg, %12 :: (store (s32) into %ir.3)
        ; CHECK: %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
        ; CHECK-NEXT: %12:gr32 = nsw IMUL32rr %11, %10, implicit-def $eflags
        ; CHECK-NEXT: MOV32mr %stack.1, 1, $noreg, 0, $noreg, %12 :: (store (s32) into %ir.3)
        ; CHECK-NEXT: ADD64ri32 4, &ic, implicit-def $eflags

    bb.3 (%ir-block.13):
        %13:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.4)
        %14:gr32 = nsw INC32r %13, implicit-def $eflags
        MOV32mr %stack.2, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.4)
        JMP_1 %bb.1
        ; CHECK: %14:gr32 = nsw INC32r %13, implicit-def $eflags
        ; CHECK-NEXT: MOV32mr %stack.2, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.4)
        ; CHECK-NEXT: ADD64ri32 4, &ic, implicit-def $eflags
        ; CHECK-NEXT: JMP_1 %bb.1

    bb.4 (%ir-block.16):
        %9:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
        $eax = COPY %9
        RET 0, implicit $eax
        ; CHECK: %9:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
        ; CHECK-NEXT: $eax = COPY %9
        ; CHECK-NEXT: ADD64ri32 3, &ic, implicit-def $eflags
        ; CHECK-NEXT: RET 0, implicit $eax

...
